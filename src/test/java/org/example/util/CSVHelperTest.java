package org.example.util;

import org.example.model.Product;
import org.junit.jupiter.api.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class CSVHelperTest {

    private List<Product> sampleProducts;

    @BeforeEach
    void setUp() {
        sampleProducts = Arrays.asList(
                new Product(1, "Laptop", "Electronics", 10, 55000.0, 5),
                new Product(2, "Phone", "Electronics", 5, 25000.0, 3)
        );
    }

    @AfterEach
    void cleanUp() throws IOException {
        Path reportsDir = Paths.get("reports");
        if (Files.exists(reportsDir)) {
            Files.walk(reportsDir)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .forEach(File::delete);
        }
    }

    // ✅ Test 1: Successful report generation with valid product list
    @Test
    void testGenerateProductsReport_Success() throws IOException {
        String filePath = CSVHelper.generateProductsReport(sampleProducts, "Jenel");

        assertNotNull(filePath, "Report path should not be null");
        assertTrue(Files.exists(Paths.get(filePath)), "Report file should exist");

        String content = Files.readString(Paths.get(filePath));

        // ✅ Validate structure and data
        assertTrue(content.contains("=== Inventory Report ==="));
        assertTrue(content.contains("Generated By: Jenel"));
        assertTrue(content.contains("ID,Name,Category,Quantity,Price,Threshold"));
        assertTrue(content.contains("Laptop"));
        assertTrue(content.contains("Phone"));
        assertTrue(content.contains("Total Products: 2"));
    }

    // ✅ Test 2: Handle empty product list gracefully
    @Test
    void testGenerateProductsReport_EmptyList() throws IOException {
        String filePath = CSVHelper.generateProductsReport(Collections.emptyList(), "Jenel");
        assertNotNull(filePath);
        assertTrue(Files.exists(Paths.get(filePath)));

        String content = Files.readString(Paths.get(filePath));
        assertTrue(content.contains("No products available."));
        assertTrue(content.contains("Total Products: 0"));
    }

    // ✅ Test 3: Handle null product list safely
    @Test
    void testGenerateProductsReport_NullList() throws IOException {
        String filePath = CSVHelper.generateProductsReport(null, "Jenel");
        assertNotNull(filePath);
        assertTrue(Files.exists(Paths.get(filePath)));

        String content = Files.readString(Paths.get(filePath));
        assertTrue(content.contains("No products available."));
        assertTrue(content.contains("Total Products: 0"));
    }


}
